import requests
import time
import threading
from flask import Flask
import google.generativeai as genai

# ===== C·∫•u h√¨nh =====
GEMINI_API_KEY = "YOUR_GEMINI_API_KEY"
BLYNK_TOKEN = "YOUR_BLYNK_TOKEN"
BLYNK_BASE_URL = "https://blynk.cloud/external/api"

# C·∫•u h√¨nh Gemini
genai.configure(api_key=GEMINI_API_KEY)

# Flask app
app = Flask(__name__)


# ==== H√†m Blynk API ====
def get_value(pin):
    url = f"{BLYNK_BASE_URL}/get?token={BLYNK_TOKEN}&{pin}"
    res = requests.get(url)
    if res.status_code == 200 and res.text.strip() != "":
        return res.text.strip()
    return ""


def set_value(pin, val):
    url = f"{BLYNK_BASE_URL}/update?token={BLYNK_TOKEN}&{pin}={val}"
    requests.get(url)


def write_output_long(msg, chunk_size=200):
    """Chia nh·ªè v√† g·ª≠i tin nh·∫Øn d√†i v√†o Terminal Output (V6)"""
    parts = [msg[i:i + chunk_size] for i in range(0, len(msg), chunk_size)]
    for p in parts:
        set_value("V6", p)
        time.sleep(0.2)


def clear_input():
    set_value("V5", "")  # x√≥a input sau khi x·ª≠ l√Ω


# ==== H√†m Gemini ====
def ask_gemini(prompt_text, history):
    model = genai.GenerativeModel("models/gemini-pro-latest")

    # Gh√©p to√†n b·ªô l·ªãch s·ª≠
    full_prompt = ""
    for item in history:
        full_prompt += f"{item['role'].capitalize()}: {item['content']}\n"
    full_prompt += f"User: {prompt_text}"

    response = model.generate_content(full_prompt)
    return response.text


# ==== MAIN LOOP ====
def main_loop():
    conversation_history = []
    print("ü§ñ Bot ƒë√£ kh·ªüi ƒë·ªông. H√£y nh·∫≠p c√¢u h·ªèi v√†o V5 ho·∫∑c b·∫≠t c√¥ng t·∫Øc V7 ƒë·ªÉ g·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn.")

    while True:
        try:
            # ƒê·ªçc d·ªØ li·ªáu c·∫£m bi·∫øn
            temp = get_value("V1")
            hum = get_value("V2")
            soil = get_value("V3")

            # Ki·ªÉm tra switch V7
            switch_state = get_value("V7")
            if switch_state == "1":  # N·∫øu b·∫≠t
                prompt = f"""
                ƒê√¢y l√† d·ªØ li·ªáu c·∫£m bi·∫øn:
                - Nhi·ªát ƒë·ªô: {temp} ¬∞C
                - ƒê·ªô ·∫©m kh√¥ng kh√≠: {hum} %
                - ƒê·ªô ·∫©m ƒë·∫•t: {soil} %

                H√£y ph√¢n t√≠ch v√† ƒë∆∞a ra g·ª£i √Ω ƒëi·ªÅu khi·ªÉn h·ªá th·ªëng t∆∞·ªõi c√¢y.
                """
                reply = ask_gemini(prompt, conversation_history)
                write_output_long(reply)

                conversation_history.append({'role': 'user', 'content': prompt})
                conversation_history.append({'role': 'assistant', 'content': reply})

                set_value("V7", "0")  # reset c√¥ng t·∫Øc v·ªÅ 0

            # Ki·ªÉm tra c√≥ c√¢u h·ªèi t·ª´ V5
            user_input = get_value("V5")
            if user_input and user_input.strip() != "":
                reply = ask_gemini(user_input, conversation_history)
                write_output_long(reply)

                conversation_history.append({'role': 'user', 'content': user_input})
                conversation_history.append({'role': 'assistant', 'content': reply})

                clear_input()  # x√≥a input ƒë·ªÉ ch·ªù c√¢u m·ªõi
            time.sleep(1)

        except Exception as e:
            print("‚ö†Ô∏è L·ªói:", e)
            time.sleep(2)


# ==== Flask route ƒë·ªÉ Render nh·∫≠n di·ªán port ====
@app.route("/")
def home():
    return "‚úÖ Bot Blynk + Gemini ƒëang ch·∫°y tr√™n Render!"


if __name__ == "__main__":
    # Ch·∫°y v√≤ng l·∫∑p ch√≠nh trong thread ri√™ng
    t = threading.Thread(target=main_loop, daemon=True)
    t.start()

    # Flask ch·∫°y ƒë·ªÉ Render nh·∫≠n di·ªán port
    app.run(host="0.0.0.0", port=10000)
